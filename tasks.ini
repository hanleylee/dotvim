[file-run-inside]
command="$(VIM_FILEPATH)"
# command:c=gcc -Wall -O2 "$(VIM_FILEPATH)" -o "$XDG_CACHE_HOME/build/c/$(VIM_FILENOEXT)" && "$XDG_CACHE_HOME/build/c/$(VIM_FILENOEXT)"
command:c=clang -x c -g -Wall -std=c99 "$(VIM_FILEPATH)" -o "$XDG_CACHE_HOME/build/c/$(VIM_FILENOEXT)" && "$XDG_CACHE_HOME/build/c/$(VIM_FILENOEXT)"
command:cpp=clang++ -x c++ -g -Wall -std=c++17 "$(VIM_FILEPATH)" -o "$XDG_CACHE_HOME/build/cpp/$(VIM_FILENOEXT)" && "$XDG_CACHE_HOME/build/cpp/$(VIM_FILENOEXT)"
command:objc=clang -ObjC -framework Foundation -o "$XDG_CACHE_HOME/build/objc/$(VIM_FILENOEXT)" "$(VIM_FILEPATH)" && "$XDG_CACHE_HOME/build/objc/$(VIM_FILENOEXT)"
; command:swift=swiftc "$(VIM_FILEPATH)" -o "$XDG_CACHE_HOME/build/swift/$(VIM_FILENOEXT)" && "$XDG_CACHE_HOME/build/swift/$(VIM_FILENOEXT)"
command:swift=swift "$(VIM_FILEPATH)"
# command:rust=rustc "$(VIM_FILEPATH)" -o "$XDG_CACHE_HOME/build/rust/$(VIM_FILENOEXT)" && "$XDG_CACHE_HOME/build/rust/$(VIM_FILENOEXT)"
command:rust=rust-script "$(VIM_FILEPATH)"
; command:go=go build -o "$(VIM_FILEPATH)" "$(VIM_PATHNOEXT)" && "$(VIM_PATHNOEXT)"
command:go=go run "$(VIM_FILEPATH)"
command:java=java "$(VIM_FILENAME)"
command:python=python "$(VIM_FILENAME)"
command:javascript=node "$(VIM_FILENAME)"
command:typescript=ts-node "$(VIM_FILENAME)"
command:sh=sh "$(VIM_FILENAME)"
command:zsh=zsh "$(VIM_FILENAME)"
command:bash=bash "$(VIM_FILENAME)"
command:fish=fish "$(VIM_FILENAME)"
command:lua=lua "$(VIM_FILENAME)"
command:perl=perl "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
command:php=php "$(VIM_FILENAME)"
command:make=make -f "$(VIM_FILEPATH)"
command:emake=emake -e "$(VIM_FILENAME)"
command:erlang=escript "$(VIM_FILENAME)"
command:ps1=powershell -file "$(VIM_FILENAME)"
command:scala=scala "$(VIM_FILENAME)"
command:haskell=ghci "$(VIM_FILENAME)"
command:scheme=scheme --script "$(VIM_FILENAME)"
command:applescript=osascript "$(VIM_FILENAME)"
command:dart=dart "$(VIM_FILENAME)"
command:vader=:TestFile
; command:vim=:source %
output=terminal
pos=quickfix
# pos=bottom
; pos=tab # these can override g:asynctasks_term_pos
cwd=$(VIM_FILEDIR)
; save=2

[file-run-outside]
command:html,xhtml=open -a Safari "$(VIM_FILENAME)"
command:markdown=:MarkdownPreview
command:plantuml=:PlantumlOpen
output=terminal
; silent=1
pos=vim
; pos=tab # these can override g:asynctasks_term_pos
cwd=$(VIM_FILEDIR)
; save=2

[project-build]
command=make
# set the working directory to the project root.
cwd=$(VIM_ROOT)
output=quickfix
; save=2

[project-run]
command=make run
# <root> is an alias to `$(VIM_ROOT)`, a little easier to type.
cwd=<root>
; output=quickfix
output=terminal
pos=quickfix
; save=2

[project-build-run]
command=make && make run
cwd=<root>
; output=quickfix
output=terminal
; save=2


; $VIM_FILEPATH  - File name of current buffer with full path
; $VIM_FILENAME  - File name of current buffer without path
; $VIM_FILEDIR   - Full path of current buffer without the file name
; $VIM_FILEEXT   - File extension of current buffer
; $VIM_FILENOEXT - File name of current buffer without path and extension
; $VIM_CWD       - Current directory
; $VIM_RELDIR    - File path relativize to current directory
; $VIM_RELNAME   - File name relativize to current directory 
; $VIM_ROOT      - Project root directory
; $VIM_CWORD     - Current word under cursor
; $VIM_CFILE     - Current filename under cursor
; $VIM_GUI       - Is running under gui ?
; $VIM_VERSION   - Value of v:version
; $VIM_COLUMNS   - How many columns in vim's screen
; $VIM_LINES     - How many lines in vim's screen
; $VIM_SVRNAME   - Value of v:servername for +clientserver usage 
